// Zed keymap
//
// For information on binding keys, see the Zed
// documentation: https://zed.dev/docs/key-bindings
//
// To see the default key bindings run `zed: open default keymap`
// from the command palette.
[
  // {
  //   "context": "Workspace",
  //   "bindings": {
  //     // "shift shift": "file_finder::Toggle"
  //   }
  // },
  {
    "context": "Editor && (vim_mode == normal || vim_mode == visual) && !VimWaiting && !menu",
    "bindings": {
      // put key-bindings here if you want them to work in normal & visual mode
      // Git
      "space g h d": "editor::ToggleHunkDiff",
      "space g h r": "editor::RevertSelectedHunks",

      // Toggle inlay hints
      "space t i": "editor::ToggleInlayHints",

      // Toggle soft wrap
      "space u w": "editor::ToggleSoftWrap",

      // NOTE: Toggle Zen mode, not fully working yet
      "space c z": "workspace::ToggleCenteredLayout",

      // Open markdown preview
      "space m p": "markdown::OpenPreview",
      "space m P": "markdown::OpenPreviewToTheSide",

      // Open recent project
      "space s /": "buffer_search::Deploy",
      // Search word under cursor
      "space s w": "pane::DeploySearch",

      // Go to file with `gf`
      "g f": "editor::OpenExcerpts",
      // Chat with AI
      "space a c": "assistant::ToggleFocus"
    }
  },
  {
    "context": "Editor && vim_mode == normal && !VimWaiting && !menu",
    "bindings": {
      // put key-bindings here if you want them to work only in normal mode
      // Window movement bindings
      // Using vim base keybingins

      // +LSP
      "space c a": "editor::ToggleCodeActions",
      // "space .": "editor::ToggleCodeActions",
      "space c r": "editor::Rename",
      "g d": "editor::GoToDefinition",
      "g D": "editor::GoToDefinitionSplit",
      "g i": "editor::GoToImplementation",
      "g I": "editor::GoToImplementationSplit",
      "g t": "editor::GoToTypeDefinition",
      "g T": "editor::GoToTypeDefinitionSplit",
      "g r": "editor::FindAllReferences",
      "] d": "editor::GoToDiagnostic",
      "[ d": "editor::GoToPrevDiagnostic",
      // TODO: Go to next/prev error
      "] e": "editor::GoToDiagnostic",
      "[ e": "editor::GoToPrevDiagnostic",
      // Symbol search
      "space s s": "outline::Toggle",
      "space S": "project_symbols::Toggle",
      // Diagnostic
      "space x x": "diagnostics::Deploy",

      // +Git
      // Git prev/next hunk
      "] h": "editor::GoToHunk",
      "[ h": "editor::GoToPrevHunk",

      // TODO: git diff is not readyyet, refer https://github.com/zed-industries/zed/issues/8665#issuecomment-2194000497

      // + Buffers
      // Switch between buffers
      "shift-h": "pane::ActivatePrevItem",
      "shift-l": "pane::ActivateNextItem",
      // Close active panel
      "shift-q": "pane::CloseActiveItem",
      "ctrl-q": "zed::Quit",
      "space q a": "pane::CloseActiveItem",
      // Close other items
      "space q i": "pane::CloseInactiveItems",
      // Restore other items
      "space q c": "pane::ReopenClosedItem",
      // Project search
      "space /": "pane::DeploySearch",
      "space s .": "projects::OpenRecent",
      // TODO: Open other files
      // Show project panel with current file
      "space e": "project_panel::ToggleFocus",
      // "space e": "pane::RevealInProjectPanel",
      // Toggle chat panel
      "ctrl-c c": "collab_panel::ToggleFocus",
      // Toggle Bottom Dock
      "ctrl-'": "workspace::ToggleBottomDock",
      "space r": "search::ToggleReplace"
    }
  },
  // Empty pane, set of keybindings that are available when there is no active editor
  {
    "context": "EmptyPane || SharedScreen",
    "bindings": {
      // Open file finder
      // "space space": "file_finder::Toggle",
      // Open recent project
      "space s .": "projects::OpenRecent",
      "space e": "project_panel::ToggleFocus"
    }
  },
  // Comment code
  {
    "context": "Editor && vim_vode == visual && !VimWaiting && !menu",
    "bindings": {
      // visual, visual line & visual block modes
      "g c": "editor::ToggleComments"
    }
  },
  // Better escape
  {
    "context": "Editor && vim_mode == insert && !menu",
    "bindings": {
      "j j": "vim::NormalBefore", // remap jj in insert mode to escape
      "j k": "vim::NormalBefore" // remap jk in insert mode to escape
    }
  },
  // Rename
  {
    "context": "Editor && vim_operator == c",
    "bindings": {
      "c": "vim::CurrentLine",
      "r": "editor::Rename" // zed specific
    }
  },
  // Code Action
  {
    "context": "Editor && vim_operator == c",
    "bindings": {
      "c": "vim::CurrentLine",
      "a": "editor::ToggleCodeActions" // zed specific
    }
  },
  // Toggle terminal
  {
    "context": "Workspace",
    "bindings": {
      "ctrl-\\": "terminal_panel::ToggleFocus"
    }
  },
  // File panel (netrw)
  {
    "context": "ProjectPanel && not_editing",
    "bindings": {
      "%": "project_panel::NewFile",
      "D": "project_panel::NewDirectory",
      "r": "project_panel::Rename",
      "t": "project_panel::Trash",
      "x": "project_panel::Cut",
      "y": "project_panel::Copy",
      "p": "project_panel::Paste",
      // Close project panel as project file panel on the right
      "space e": "workspace::ToggleRightDock"
      // // Navigate between panel
      // "ctrl-h": ["workspace::ActivatePaneInDirection", "Left"],
      // "ctrl-l": ["workspace::ActivatePaneInDirection", "Right"],
      // "ctrl-k": ["workspace::ActivatePaneInDirection", "Up"],
      // "ctrl-j": ["workspace::ActivatePaneInDirection", "Down"]
    }
  },
  {
    "context": "AssistantPanel",
    "bindings": {
      "space c": "workspace::ToggleRightDock"
    }
  },
  {
    "context": "CollanChatPanel",
    "bindings": {
      "ctrl-b": "workspace::ToggleLeftDock"
    }
  },
  {
    "context": "CreateNewFile",
    "bindings": {
      "ctrl-n": "workspace::NewFile"
    }
  },
  // Panel nagivation
  {
    "context": "Dock",
    "bindings": {
      "ctrl-w h": ["workspace::ActivatePaneInDirection", "Left"],
      "ctrl-w l": ["workspace::ActivatePaneInDirection", "Right"],
      "ctrl-w k": ["workspace::ActivatePaneInDirection", "Up"],
      "ctrl-w j": ["workspace::ActivatePaneInDirection", "Down"],
      "ctrl-w n": "workspace::NewFileSplitVertical"
    }
  },
  {
    "context": "Workspace",
    "bindings": {
      // Map VSCode like keybindings
      // "cmd-b": "workspace::ToggleRightDock",
      // Toggle Bottom Dock
      "ctrl-'": "workspace::ToggleBottomDock"
    }
  },
  // Run nearest task
  {
    "context": "EmptyPane || SharedScreen || vim_mode == normal",
    "bindings": {
      "space r t": ["editor::SpawnNearestTask", { "reveal": "no_focus" }]
    }
  }
  // Subword motion is not working really nice with `ciw`, disable for now
  // {
  //   "context": "VimControl && !menu",
  //   "bindings": {
  //     "w": "vim::NextSubwordStart",
  //     "b": "vim::PreviousSubwordStart",
  //     "e": "vim::NextSubwordEnd",
  //     "g e": "vim::PreviousSubwordEnd"
  //   }
  // }
]
